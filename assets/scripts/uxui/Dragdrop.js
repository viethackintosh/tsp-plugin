import{buildTag as e}from"../helpers/buildtag.js";let DRAP_DROPPER=`<div class="drag__wrapper">        
        <label class="drag__label label">
            <span class="label__title title">Click here select files</span>
            <input type=file class="drag__file file">
        </label>
        <h3 class="drag__message message">Drap and drop files here to upload</h3>
        </div>
        <div class="drag__result result"></div>
`,DragDrop=function(){let t=this;t.drag,t.init=({id:e,config:l})=>{let r=document.querySelector(`#${e}`);return r=r?t.collectDrapdrop({drag:r,config:l}):t.createNewDrapdrop({id:e,config:l}),t.drag=r,t},t.createNewDrapdrop=({id:l,config:r})=>{let a=e({tag:"div",className:"drag parent",id:l,innerHTML:DRAP_DROPPER});return t.collectDrapdrop({drag:a,config:r})},t.collectDrapdrop=({drag:e,config:l})=>{let r={main:e,title:e.querySelector(".title"),message:e.querySelector(".message"),input:e.querySelector("input[type=file]"),result:e.querySelector(".result")};return Object.entries(l).map(([e,l])=>t[e]({paramater:l,dragger:r})),["dragover","drop","dragleave"].map(e=>{r.main.addEventListener(e,t.preventDefault,!1)}),["dragenter","dragover"].map(e=>{r.main.addEventListener(e,e=>t.highlight({dragger:r}),!1)}),["drop","dragleave"].map(e=>{r.main.addEventListener(e,e=>t.unHighlight({dragger:r}),!1)}),r.main.addEventListener("drop",e=>t.drop({event:e,dragger:r}),!1),r},t.message=({paramater:e,dragger:t})=>t.message.innerHTML=e,t.label=({paramater:e,dragger:t})=>t.title.innerText=e,t.multiple=({paramater:e,dragger:t})=>t.input.multiple=e,t.accept=({paramater:e,dragger:t})=>t.input.accept=e,t.preventDefault=e=>{e.preventDefault(),e.stopPropagation()},t.highlight=({dragger:e})=>e.main.classList.add("active"),t.unHighlight=({dragger:e})=>e.main.classList.remove("active"),t.drop=({event:e,dragger:t})=>{let l=e.dataTransfer,r=new DataTransfer;if(!1===t.input.multiple){let a=Array.from(l.files).filter(e=>""!=e.type&&-1!==t.input.accept.indexOf(e.type));r.items.add(a[0]),t.input.files=r.files}else{let i=[...Array.from(t.input.files),...Array.from(l.files)];0!==(i=i.reduce((e,l)=>{let r=e.filter(e=>e.name==l.name),a=""!=l.type&&-1!==t.input.accept.indexOf(l.type);return 0==r.length&&a?[...e,l]:e},[])).length&&i.forEach(e=>r.items.add(e)),t.input.files=r.files}let n=`<ul>${Array.from(t.input.files).map(e=>`<li>${e.name}</li>`).join("")}</ul>`;t.result.innerHTML=n}};export{DragDrop};