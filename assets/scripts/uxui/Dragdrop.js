import{buildTag as e}from"../helpers/buildtag.js";let DRAP_DROPPER=`<div class="drag__wrapper">        
        <label class="drag__label drag__area label">
            <span class="label__title title">Click here select files</span>
            <input type=file class="drag__file file">
            </label>       
            <p>Result</p>
            <div class="drag__result result">
            </div>
    </div>
`,DragDrop=function(){let t=this;t.drag,t.init=({id:e,config:r})=>{let a=document.querySelector(`#${e}`);return a=a?t.collectDrapdrop({drag:a,config:r}):t.createNewDrapdrop({id:e,config:r}),t.drag=a,t},t.createNewDrapdrop=({id:r,config:a})=>{let l=e({tag:"div",className:"drag parent",id:r,innerHTML:DRAP_DROPPER});return t.collectDrapdrop({drag:l,config:a})},t.collectDrapdrop=({drag:e,config:r})=>{let a={main:e,dragArea:e.querySelector(".drag__area"),title:e.querySelector(".title"),input:e.querySelector("input[type=file]"),result:e.querySelector(".result")};return Object.entries(r).map(([e,r])=>t[e]({paramater:r,dragger:a})),a.input.onchange=e=>t.fileOnChange({event:e,dragger:a}),["dragover","drop","dragleave"].map(e=>{a.dragArea.addEventListener(e,t.preventDefault,!1)}),["dragenter","dragover"].map(e=>{a.dragArea.addEventListener(e,e=>t.highlight({dragger:a}),!1)}),["drop","dragleave"].map(e=>{a.dragArea.addEventListener(e,e=>t.unHighlight({dragger:a}),!1)}),a.dragArea.addEventListener("drop",e=>t.drop({event:e,dragger:a}),!1),a},t.message=({paramater:e,dragger:t})=>t.message.innerHTML=e,t.label=({paramater:e,dragger:t})=>t.title.innerText=e,t.multiple=({paramater:e,dragger:t})=>t.input.multiple=e,t.accept=({paramater:e,dragger:t})=>t.input.accept=e,t.dataType=({paramater:e,dragger:t})=>t.dragArea.dataType=e,t.preventDefault=e=>{e.preventDefault(),e.stopPropagation()},t.highlight=({dragger:e})=>e.dragArea.classList.add("active"),t.unHighlight=({dragger:e})=>e.dragArea.classList.remove("active"),t.drop=({event:e,dragger:r})=>{let a=e.dataTransfer;t[`get${r.dragArea.dataType}`]({tranfer:a,dragger:r})},t.fileOnChange=({event:e,dragger:r})=>{if(r.input.multiple){let a=t.mergeFiles({source:r.dragArea.files,target:r.input.files,acceptList:r.input.accept});r.input.files=a,r.dragArea.files=a}let l=`<ul>${Array.from(r.input.files).map(e=>`<li>${e.name}</li>`).join("")}</ul>`;r.result.innerHTML=l},t.getfile=({tranfer:e,dragger:r})=>{if(!1===r.input.multiple){let a=Array.from(e.files).filter(e=>""!=e.type&&-1!==r.input.accept.indexOf(e.type));tempTranfer.items.add(a[0]),r.input.files=tempTranfer.files}else{let l=t.mergeFiles({source:e.files,target:r.input.files,acceptList:r.input.accept});r.input.files=l,r.dragArea.files=l}let i=`<ul>${Array.from(r.input.files).map(e=>`<li>${e.name}</li>`).join("")}</ul>`;r.result.innerHTML=i},t.mergeFiles=({source:e,target:t,acceptList:r})=>{let a=new DataTransfer,l=[...Array.from(e),...Array.from(t)];return 0!==(l=l.reduce((e,t)=>{let a=e.filter(e=>e.name==t.name),l=""!=t.type&&-1!==r.indexOf(t.type);return 0==a.length&&l?[...e,t]:e},[])).length&&l.forEach(e=>a.items.add(e)),a.files}};export{DragDrop};